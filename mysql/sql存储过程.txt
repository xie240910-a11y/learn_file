#存储过程
    存储过程是事先经过编译并存储在数据库中的一段SQL语句的集合，调用存储过程可以简化开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的
    存储过程思想上很简单，就是数据库SQL语言层面的代码封装与重用
    特点：
        封装、复用
        可以接收参数，也可以返回数据
        减少网络交互，效率提升
    
创建存储过程：
    create procedure 存储过程名称 begin sql语句 end;
    create procedure p1()
    begin
        select count(*) from student;
    end;
调用存储过程：
    call 存储名称（）;
    call p1();

查看存储过程：
    select * from information_schema.ROUTINES where ROUTINES_SCHEMA='xxx';查看数据库存储过程
    show create procedure 存储过程名称;
删除存储过程：
    drop procedure（if exists） 存储过程名称

注意：
    在命令行中，由于分号结束，需要更改结束标志的话需要更改：
        delimiter $$

存储过程变量：
    系统变量：由mysql服务器提供，不是用户定义的，属于服务器层面，分为全局变量（global）跟会话变量（session）

        查看系统变量：
            1、SHOW[SESSION|GLOBAL] VARIABLES;查看所有系统变量
            2、SHOW[SESSION|GLOBAL] VARIABLES LIKE '...'; 模糊匹配方式查找
            3、SELECT @@[SESSION|GLOBAL] 系统变量名; 查看指定系统变量

        设置系统变量：
            SET[SESSION|GLOBAL] 系统变量名=值;
        注意：如果没有指定SESSION/GLOBAL ，默认是SESSION会话变量
        mysql服务重启后，所有设置的全局参数会失效，如果想不失效，需要在/etc/my.conf中配置
        
    用户自定义变量：
        SET @[SESSION|GLOBAL] 系统变量名=值;

        赋值：
        set @myname = 'itcast';
        set @myage := 10;
        set @mygender := '男', @myhobby := 'java';
        select @mycolor := 'red';
        select count(*) into @mycount from tb_user;
        推荐用 :=

        查询：
        select @myname, @myage, @mygender,@myhobby;

    局部变量：
        使用deleare 变量名 变量类型【default】; 并且只能设置在begin  end;里
        赋值与系统变量类似

    if判断： if 条件 then  elseif 条件2 then ...  end if;
        create procedure p3()
        begin
            declare score int default 58;
            declare result varchar(10);
            if score >= 85 then
                set result := '优秀';
            elseif score >= 60 then
                set result := '及格'
            else
                set result := '不及格';
            end if
            select result;
        end;

        call p3();

    存储过程的参数：
        IN: 该类型参数作为输入，也就是需要调用时传入值，默认
        OUT: 该类型参数作为输出，可以作为返回值
        INOUT: 既作为输入参数，也可以作为输出参数
        create procedure p4(in score int, out result varchar(10))
        begin
            if score >= 85 then
                set result := '优秀';
            elseif score >= 60 then
                set result := '及格'
            else
                set result := '不及格';
            end if
            select result;
        end;

        call p4(65, @result);
        select @result;
        ---------------------
        create procedure p5(inout score double)
        begin
            set score := score * 0.5;
        end;
        set @score = 78;  
        call p5(@score);
        select @score;

    存储过程的case方法：
        CASE CASE_VALUE
            WHEN when_value1 THEN statement_list1
            WHEN when_value2 THEN statement_list2
            ELSE statement_list
        END CASE;

        CASE
            WHEN search_condition1 THEN statement_list1
            WHEN search_condition2 THEN statement_list2
            ELSE statement_list
        END CASE;
        ---------------------------------
        create procedure p6(in month int)
        begin
            declare result varchar(10);
            case
                when month >= 1 and month <= 3 then
                    set result := '第一季度';
                when month >= 4 and month <= 6 then
                    set result := '第二季度';
                when month >= 7 and month <= 9 then
                    set result := '第三季度';
                when month >= 10 and month <= 12 then
                    set result := '第四季度';
            end case;
            select concat('您输入的月份为', month, ', 所属季度为：', result);
        end;

        call p6(65, @result);
        select @result;

    存储过程的while方法：
        while循环是有条件的循环控制语句。满足条件后，在执行循环体中的sql语句；
        WHILE 条件 DO
            SQL逻辑
        END WHILE;
        ------------------
        create procedure p7(in N int)
        begin
            declare total int default 0;
            while n > 0 do
                set total := total + n;
                set n := n - 1;
            end while;
            select total;
        end;
        call p7(100);

    存储过程的repeat方法：
        repeat循环是有条件的循环控制语句。满足条件后退出循环；
        REPEAT
            SQL逻辑
            UNTIL 条件
        END REPEAT;
        ------------------
        create procedure p8(in n int)
        begin
            declare total int default 0;
            repeat
                set total := total + n;
                set n := n - 1;
            until n <= 0
            end repeat;

            select total;
        end;
        call p8(100);

    存储过程的loop方法：
        LOOP实现简单的循环，如果不在sql逻辑中增加退出循环的条件，可以用来实现简单的死循环。LOOP可以配合以下两个语句使用
            -- LEAVE 配合循环使用，退出循环
            -- ITERATE 必须用在循环中，跳过当前循环剩下的语句，直接进入下一次循环
        
        begin_label:LOOP
            SQL逻辑
        END LOOP begin_label
        LEAVE LABEL; 退出指定标记的循环体
        ITERATE LABEL; --直接进入下一次循环
        ----------------------------
        create procedure p9(in N int)
        begin
            declare total int default 0;
            sum:loop
                if n <= 0 then
                    leave sum;
                end if;

                set total := total + n;
                set n := n - 1;
            end loop sum;

            select total;
        end;
        call p9(100);

        奇数跳过
        create procedure p10(in N int)
        begin
            declare total int default 0;
            sum:loop
                if n <= 0 then
                    leave sum;
                end if;
                if n % 2 = 1 then
                    set n := n - 1;
                    iterate sum;
                end if;

                set total := total + n;
                set n := n - 1;
            end loop sum;

            select total;
        end;
        call p10(100);

    存储过程中的游标：
        游标（CURSOR）是用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明，OPEN， FETCH和CLOSE，其语法如下：
            声明游标：DECLARE 游标名称 CURSOR FOR 查询语句;
            打开游标：OPEN 游标名称;
            获取游标记录：FETCH 游标名称 INTO 变量[, 变量];
            关闭游标：CLOSE 游标名称;   
        ------------------------------------------
        create procedure p11(in uage int)
        begin
            declare u_name varchar(100);
            declare u_pro  varchar(100);
            // 普通声明应该在游标声明之前
            declare u_cursor cursor for select name, profession from tb_user where age <= uage;
            

            create table if not exists tb_user_pro(
                id int primary key auto_increment,
                name varchar(100),
                profession varchar(100)
            );

            open u_cursor;
            while ture do
                fetch u_cursor into u_name, u_pro;
                insert into tb_user_pro values (u_name, u_pro);
            end while;
            close u_cursor;
        end;
        call p11(30);
    
    存储过程条件处理程序：
        条件处理程序（handler）可以用来 定义在流程控制结构执行过程中遇到问题时相应的处理步骤
        DECLARE handler_action HANDLER FOR condition_value[,condition_value]... statement;
        handler_action
            CONTINUE: 继续执行当前程序
            EXIT:终止执行当前程序
        condition_value:
            SQLSTATE sqlstate_value：状态码，如02000
            SQLWARNING:所有以01开头的SQLSTATE代码的简写
            NOT FOUND: 所有以02开头的SQLSTATE代码的简写
            SQLEXCEPTION：所有没有被SQLWARNING 或 NOT 
        
        -----------------------
        create procedure p11(in uage int)
        begin
            declare u_name varchar(100);
            declare u_pro  varchar(100);
            // 普通声明应该在游标声明之前
            declare u_cursor cursor for select name, profession from tb_user where age <= uage;
            declare exit handler for SQLSTATE(not found) '02000' close u_cursor;

            create table if not exists tb_user_pro(
                id int primary key auto_increment,
                name varchar(100),
                profession varchar(100)
            );

            open u_cursor;
            while ture do
                fetch u_cursor into u_name, u_pro;
                insert into tb_user_pro values (u_name, u_pro);
            end while;
            close u_cursor;
        end;
        call p11(30);

    存储函数：存储函数是有返回值的存储过程，存储函数的参数只能是IN类型：
        CREATE FUNCTION 存储函数名称([参数列表])
        RETURNS type[characteristic]
        BEGIN
            --SQL语句
            RETURN...;
        END;
        characteristic说明：
            DETERMINISTIC:相同的输入参数总是产生相同的结果
            NO SQL：不包含SQL
            READS SQL DATA：包含读取数据的语句，但不包含写入数据的语句