MySQL配置文件路径：
    /etc/mysql/mysql.conf.d/mysqld.cnf

查看错误日志文件：show  variables like '%log_error%';
    查看log_error文件就行

二进制日志：二进制日志（BINLOG）记录了所有DDL(数据定义语言/创建表，库)语句和DML（增删改）语句，但不包括数据查询（SELECT, SHOW）
    show variables like '%log_bin%'
    log_bin 二进制日志是否开启
    log_bin_basename 二进制文件
    log_index  索引信息

    STATEMENT 基于sql语句的日志记录，记录的是sql语句，对数据进行修改的sql都会记录再日志文件中
    ROW 基于行的日志记录，记录的是每一行的数据变更（默认）
    MIXED 混合了STATEMENT和ROW两种格式，默认采用STATEMENT，在某些情况下会自动切换为ROW进行记录
    设置格式：
        vim /etc/my.conf 添加语句：binlog_format=statement
        重启mysql服务：systemctl restart mysqld
    show variables like '%binlog_format%'

    二进制查看工具：由于日志是以二进制方式存储，不能直接读取，需要通过二进制查询工具mysqlbinlog来查看：
    mysqlbinlog 【参数选项】logfilename
        -d 指定数据库名称，只列出指定数据库相关操作
        -o 忽略日志前n行命令
        -v 将行事件重构为SQL语句
        -w 将行事件重构sql语句，并标注注释信息
    注意：如果是ROW格式，需要添加-v选项，是底层mysql 的更新格式，如果使用格式是statement格式，不需要添加-v选项，展示的是当时调用的sql语句

# 日志删除
    对于比较繁忙的业务系统，每天生成的binlog数据巨大，如果长时间不清楚，将会占用大量的磁盘空间，可以通过一下几种方式清理日志
    reset master 删除全部的binlog日志，删除之后，日志编号将从binlog.000001重新开始
    purge master logs to 'binlog.******' 删除******编号之前的所有日志
    purge master logs before 'yyyy-mm-dd hh24:mi:ss'删除日志为'yyyy-mm-dd hh24:mi:ss'之前产生的所有日志

    可以在mysql的配置文件中配置二进制日志的过期时间，设置之后，二进制日志过期会自动删除
    show variables like '%binlog_expire_logs_seconds%'
    show variables like '%binlog_expire%'

查询日志：
    查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的sql语句，默认情况下，查询日志是未开启的。如果需要开启查询日志，可以设置一下配置
    show variables like '%general%';

    修改MySQL的配置文件/etc/my.conf文件添加如下内容
    general_log = 1
    general_log_file=mysql_query.log

慢查询日志：
    慢查询日志记录了所有执行时间超过参数long_query_time设置值并且扫描记录数不小于min_examined_row_limit的所有SQL语句的日志，默认未开启。long_query_time默认设置为10s，最小可0，精度可到微秒
    slow_query_log=1 #慢查询日志开关
    long_query_time=2 #执行时间参数

    默认情况，不会记录管理语句，也不会记录不适用索引进行查找的查询需要更改此行为需要更改配置
    #记录执行较慢的管理语句
    log_slow_admin_statements=1
    #记录执行较慢的未使用索引的语句
    log_queries_using_indexes=1

主从复制：
    概述：主从复制是指将主数据库的DDL和DML操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而使得从库和主库的数据保持同步
    主库（Master）  -->  从库（Slave）
    MySQL复制的主要特点包含以下三个方面：
        主库出现问题，可以快速切换到从库提供服务
        实现读写分离，降低主库的访问压力
        可以在从库中执行备份，以避免备份期间影响主库服务

    主从配置：
        192.168.200.200（master）
        192.168.200.201（slave）
        开放端口两种方式：
            1、开放指定3306端口
            firewall-cmd-zone=public --add-port=3306/tcp -permanent
            firewall-cmd -reload
            
            ubuntu:
            sudo ufw allow 3306
            sudo ufw reload
            2、关闭防火墙
            systemctl stop firewalld
            systemctl disable firewalld
            ubuntu:
            sudo ufw disable
            
    
    #主库配置：修改配置文件 /etc/mysql/mysql.conf.d/mysqld.cnf
        1、#mysql服务ID，保证整个集群环境中唯一，取值范围：1-2*32次方-1，默认1
        server-id = 1
        #是否只读，1代表只读，0代表读写（这个只读是只针对普通用户，超级管理员依旧可以读写，如果要设置超级管理员也只读，需要设置：super-read-only=1）
        read-only=1
        #忽略的数据，指不需要同步的数据库
        #binlog-ignore-db=mysql
        #指定同步数据库
        #binlog-do-db=db01
        
        2、重启mysql服务：sudo systemctl restart mysql

        3、登录mysql，创建远程连接账号，并授予主从复制权限
        # 创建itcast用户，并设置密码，该用户可在任意主机连接MySQL服务
        CREATE USER 'itcast'@'%'IDENTIFIED WITH mysql_native_password BY 'Root@123456';
        # 为'itcast'@'%'用户分配主从复制权限
        GRANT REPLICATION SLAVE ON *.* TO 'itcast'@'%';

        4、通过指令，查看二进制日志坐标
        show master status;
        字段含义说明：
            file：从哪个日志文件开始推送日志信息
            position：从哪个位置开始推送日志信息
            binlog_ignore_db: 指定不需要同步的数据库

    # 从库设置
        1、修改配置文件 /etc/mysql/mysql.conf.d/mysqld.cnf
            server-id = 2
            read-only=1
        
        2、重启mysql服务：systemctl restart mysql

        3、从库配置
            登陆mysql，设置主库配置
            CHANGE REPLICATION SOURCE TO
                SOURCE_HOST='192.168.137.128',
                SOURCE_USER='itcast',
                SOURCE_PASSWORD='Root@123456',
                SOURCE_PORT=3306,
                SOURCE_LOG_FILE='binlog.000028',
                SOURCE_LOG_POS=157;
            上述是8.0.23的语法，如果是之前版本的：
            CHANGE MASTER TO MASTER_HOST='192.168.137.128',MASTER_USER='itcast',MASTER_PASSWORD='Root@123456',MASTER_LOG_FILE='binlog.000021',MASTER_LOG_POS=664;

            参数信息：
                SOURCE_HOST（MASTER_HOST）          主库IP地址
                SOURCE_USER（MASTER_USER）          连接主库的用户名
                SOURCE_PASSWORD（MASTER_PASSWORD）  连接主库的密码
                SOURCE_LOG_FILE（MASTER_LOG_FILE）  binlog日志文件名
                SOURCE_LOG_POS（MASTER_LOG_POS）    binlog日志文件位置
    
        4、开启同步操作
            start replica; # 8.0.22之后
            start slave;   # 8.0.22之前

        5、查看主从同步状态
            show replica status\G; # 8.0.22之后
            show slave status\G;   # 8.0.22之前
        
        6、如果需要删除主从连接状态
            STOP REPLICA;      
            RESET REPLICA ALL;
            START REPLICA;
            SHOW REPLICA STATUS\G;

        配置好后查看主从同步状况看参数，下面两个参数为yes则表示成功：
            Replica_IO_Running: No
            Replica_SQL_Running: No

            如果发现问题，查看该文件进行排查：tail -f /var/log/mysql/error.log
        注意事项：
            1、确保主节点服务器防火墙3306端口打开
            2、确保mysql配置允许外服务器连接
                sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf
                bind-address = 0.0.0.0 # 0.0.0.0 表示监听所有网络接口（包括局域网 IP）。
            3、重启服务：sudo systemctl restart mysql
            4、查看端口连接状态：sudo netstat -tulnp | grep 3306

'\G'关键字：列数据转换行数据展示

# 分库分表
    随互联网以及移动互联网的发展，应用系统的数据量也是成指数式增长，若采用但数据库进行数据存储，存在一下瓶颈：
        1、IO瓶颈：热点数据太多，数据库缓存不足，产生大量磁盘IO，效率降低，请求数据太多，带宽不够，网路IO瓶颈
        2、CPU瓶颈:排序、分组、连接查询、聚合统计等SQL会耗费大量CPU资源，请求数太多，CPU出现瓶颈

        分库分表的中心思想都是将数据分散存储，使得单一数据库/表的数据量变小来缓解单一数据库的性能问题，从而达到提升数据库性能的目的

    拆分策略：
        垂直拆分
            垂直分库：以表为依据，根据业务将不同表拆分到不同库当中
                每个库的表结构不一样
                每个库的数据不一样
                所有库的并集是全量数据
            垂直分表：以字段为依据，根据id做关联，将字段属性不同拆分到不同表结构当中
                每个表的表结构不一样
                每个表的数据不一样，一般通过主键/外键关联
                所有表的并集是全量数据
                
        水平拆分
            水平分库：以字段为依据，按照一定策略，将一个库的数据拆分到多个库中
                每个库的表结构都一样
                每个库的数据都不一样
                所有库的并集是全量数据
            水平分表：以字段为依据，按照一定策略，将一个表的数据拆分到多个库的相同表中
                每个表的表结构都一样
                每个表的数据都不一样
                所有表的并集是全量数据

    工具：
        shardingJDBC：基于AOP原理，在应用程序中对本地执行的SQL进行拦截，解析、改写、路由处理。需要自行编码配置实现，只支持java语言，性能较高
        Mycat：数据库分库分表中间件，不用调整代码即可实现分库分表，支持多种语言，性能不及前者
