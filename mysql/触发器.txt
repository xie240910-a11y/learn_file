#触发器介绍：
    触发器是与表相关的数据库对象，指定在insert/update/delete之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据完整性，日志记录，数据校验等操作
    使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发不支持语句级触发。
    INSERT型触发器：NEW表示将要或者已经新增的数据
    UPDATE型触发器：OLD表示修改之前的数据，NEW表示将要或者已经修改后的数据
    DELETE型触发器：OPLD表示将要或者已经删除的数据

#触发器语法：
    创建
        CREATE TRIGGER trigger_name
        BEFORE/AFTER INSERT/UPDATE/DELETE
        ON tbl_name FOR EACH ROW --行级触发器
        BEGIN
            trigger_stmt;
        END;
    
    查看：SHOW TRIGGERS;

    删除：DROP TRIGGER [schema_name]trigger_name; // --如果没指定schema_name,默认当前数据库

    例子：通过触发器记录tb_user表的数据变更日志，将变更日志插入到日志表user_logs中，包含增加，修改，删除
    create table user_log(
        id int(11)not null auto_increment,
        operation varchar(20) not null comment '操作类型, insert/update/delete',
        operate_time datetime not null  comment '操作时间',
        operate_id int(11) not null  comment '操作的ID',
        operate_params varchar(500) comment '操作参数',
        primary key(`id`)
    )engine=innodb default charset=utf8;

    ----------------------------------insert
    create trigger tb_user_insert_trigger
        after insert on tb_user for each row
    begin
        insert into user_logs(id, operation, operate_time, operate_id, operate_params,) VALUES
        ('insert', now(), new.id, concat('插入的数据内容为：id=',new.id,',name=',new.name, ',phone=',new.phone,',email=',new.email, ',profession=', new.profession));
    end;
    ----------------------------------update
    create trigger tb_user_update_trigger
        after update on tb_user for each row
    begin
        insert into user_logs(id, operation, operate_time, operate_id, operate_params,) VALUES
        ('update', now(), new.id, concat('更新前的数据内容为：id=',old.id,',name=',old.name, ',phone=',old.phone,',email=',old.email, ',profession=', old.profession,
         ' | ', '更新后的数据内容为：id=',new.id,',name=',new.name, ',phone=',new.phone,',email=',new.email, ',profession=', new.profession
        ));
    end;
    ----------------------------------delete
    create trigger tb_user_delete_trigger
        after delete on tb_user for each row
    begin
        insert into user_logs(id, operation, operate_time, operate_id, operate_params,) VALUES
        ('delete', now(), new.id, concat('删除的数据内容为：id=',old.id,',name=',old.name, ',phone=',old.phone,',email=',old.email, ',profession=', old.profession));
    end;