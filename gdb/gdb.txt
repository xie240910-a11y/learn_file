安装gdb：yum -y install gdb / apt install gdb
gdb调试器可以在程序运行过程检查发生什么
gdb可以做：
    开始并设置参数
    打断点 在特殊情况下停止
    当你程序停止，检查发生了什么

gdb支持语言：Ada，Assembly汇编语言，C, C++, D, Fortran, GO...

gdb检查是否安装：gdb --version

一、GDB 启动方式
    启动方式	                说明
    gdb <程序名>	            启动 GDB 并加载可执行文件
    gdb --args <程序> <参数>	启动 GDB 并传入程序参数
    gdb attach <PID>	        附加到正在运行的进程
    gdb <程序名> core	        调试崩溃产生的 core dump 文件
    gdb 后输入 file <程序>	    在 GDB 内加载程序
    gdb -q	                    安静模式启动（不显示版权信息）

    ⚠️ 若要调试，需要在编译时加上 -g 参数：
    g++ main.cpp -g -o main

二、程序运行控制
    命令	    缩写	    功能
    run [参数]	r	    运行程序（可带命令行参数）
    start		        从 main() 开始并在第一行停止
    continue	c	    继续执行，直到下一个断点或程序结束
    next	    n	    单步执行（跳过函数调用）
    step	    s	    单步执行（进入函数内部）
    finish		        运行直到当前函数返回
    until       [行号]	运行到指定行或循环结束
    return      [值]    立即返回当前函数并可指定返回值
    kill		        停止当前程序执行
    quit	    q	    退出 GDB

三、断点管理（Breakpoints）
    命令	                        说明
    break <行号>	            在指定行设置断点
    break <函数名>	            在指定函数入口处设置断点
    break <文件名:行号>	        指定文件和行设置断点
    tbreak <位置>	            临时断点（触发一次后自动删除）
    condition <编号> <表达式>	给断点加条件
    delete [编号]	            删除指定断点
    disable [编号]	            禁用断点
    enable [编号]	            启用断点
    info breakpoints	        查看所有断点
    clear <位置>	            清除某行的断点

    示例：

    (gdb) break main
    (gdb) break myfile.cpp:42
    (gdb) condition 2 i == 10
    (gdb) delete 2

四、查看代码与函数
命令	                            功能
    list	                    显示当前执行行附近的源代码
    list        <函数名>	    显示指定函数代码
    list        <行号>	        显示指定行附近的代码
    list        <文件名:行号>	显示指定文件的代码
    info functions	            查看所有函数
    info source	                显示当前源文件信息
    info sources	            查看已加载的源文件列表


五、查看变量与表达式
    命令	        缩写	            功能
    print <变量>	p	            打印变量值
    print /x <变量>		            按十六进制打印
    print /d <变量>		            按十进制打印
    print /t <变量>		            按二进制打印
    display <表达式>		        每次停下都显示该表达式的值
    undisplay <编号>		        取消自动显示
    set variable <变量>=<值>		修改变量值
    whatis <变量>		            查看变量类型
    ptype <变量>		            查看结构体类型定义
    info locals		                查看当前函数所有局部变量
    info args		                查看当前函数的参数

    示例：

    (gdb) print i
    (gdb) p /x ptr
    (gdb) display x
    (gdb) whatis arr
    (gdb) ptype obj

六、内存与指针操作
    命令	                功能
    x/<格式> <地址>	    查看内存内容
    x/10xw ptr	        查看从 ptr 开始的 10 个字（十六进制）
    x/s <地址>	        查看字符串
    x/4cb <地址>	    查看4个字节的字符
    print *(int*)0x7fff12345678	打印指定地址的整数值

    格式说明：

    /nfu

    n：显示数量

    f：显示格式（x=16进制, d=10进制, c=字符, s=字符串）

    u：单位（b=字节, h=半字, w=字, g=双字）

七、堆栈与函数调用
    命令	缩写	功能
    backtrace	bt	显示函数调用栈
    frame <编号>	f	切换到指定栈帧
    info frame		查看当前栈帧信息
    info args		查看函数参数
    info locals		查看局部变量
    up / down		在调用栈中上下移动

    示例：

    (gdb) bt
    #0 func3() at test.cpp:30
    #1 func2() at test.cpp:20
    #2 func1() at test.cpp:10
    #3 main() at test.cpp:5

    (gdb) frame 1
    (gdb) info locals

八、多线程调试
    命令	功能
    info threads	查看当前所有线程
    thread <编号>	切换到指定线程
    thread apply all bt	所有线程打印调用栈
    break thread <编号>	仅在某线程上设置断点

九、信号与异常
    命令	功能
    handle <信号> <行为>	控制 GDB 对信号的处理方式
    catch throw	捕获 C++ 异常抛出
    catch catch	捕获异常被捕获时
    catch exec	程序执行 exec 调用时停止

    示例：

    (gdb) handle SIGPIPE ignore
    (gdb) catch throw

十、调试共享库（动态库）
    命令	功能
    info sharedlibrary	查看已加载的共享库
    sharedlibrary	手动加载共享库符号
    break mylib.cpp:50	在动态库中打断点

    ⚠️ 若库未加载时断点无效，可使用：

    (gdb) break myfunc if 0
    (gdb) commands
    > condition 1 true
    > end

十一、日志与记录
    命令	功能
    set logging on	开启日志输出到 gdb.txt
    set logging off	关闭日志
    set logging file <文件名>	指定日志文件名

十二、实用技巧与组合命令
    命令	功能
    info registers	查看寄存器状态
    disassemble	查看汇编指令
    shell <命令>	执行系统命令
    source <脚本>	执行 GDB 命令脚本
    define <名字>	定义自定义命令宏
    info files	查看程序映射段信息

十三、C++ 特有命令
    命令	功能
    info vtbl <对象>	查看虚函数表
    print dynamic_cast<>()	运行时类型转换
    set print pretty on	美化输出结构体
    set print object on	打印真实类型（多态对象）
    十四、调试核心转储（core dump）
    ulimit -c unlimited             # 允许生成 core 文件
    ./a.out                         # 程序崩溃后生成 core
    gdb ./a.out core                # 调试 core 文件
    (gdb) bt                        # 查看崩溃栈

十五、最常用调试流程示例
    g++ -g main.cpp -o main         # 编译带调试信息
    gdb ./main                      # 启动 GDB

    (gdb) break main
    (gdb) run                      # 运行程序
    (gdb) next                     # 单步执行
    (gdb) print x                  # 查看变量
    (gdb) bt                       # 查看调用栈
    (gdb) quit                     # 退出